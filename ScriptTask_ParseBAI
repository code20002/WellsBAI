#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;
using System.Collections.Generic;
#endregion

namespace ST_e985b86348734252bd8708c7416e6996
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion

        class BaiPreviousDayFile
        {
            public string FileHeader { get; set; }
            public List<BaiPreviousDayGroup> Groups { get; set; }
            public string FileTrailer { get; set; }
        }
        class BaiPreviousDayGroup
        {
            public string GroupHeader { get; set; }
            public List<BaiPreviousDayAccount> Accounts { get; set; }
            public string GroupTrailer { get; set; }
        }
        class BaiPreviousDayAccount
        {
            public string AccountHeader { get; set; }
            public List<string> DetailTransactions { get; set; }
            public string AccountTrailer { get; set; }
        } 

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            try
            {
                string fileName = Dts.Variables["FileName"].Value.ToString();
                string TableName = Dts.Variables["TableName"].Value.ToString();
                string record = string.Empty;
                List<string> Records = new List<string>();
                BaiPreviousDayFile curFile = new BaiPreviousDayFile();
                string query = string.Empty;
                string recordid = string.Empty;
                string recorddetail = string.Empty; 
                string contflag = string.Empty;
                SqlConnection conn = new SqlConnection();
                conn = (SqlConnection)(Dts.Connections["dest_ado_db_staging"].AcquireConnection(Dts.Transaction) as SqlConnection);
                //Read data from table or view to data table       
                System.IO.StreamReader SourceFile = new System.IO.StreamReader(fileName);

                curFile.Groups = new List<BaiPreviousDayGroup>();
                while ((record = SourceFile.ReadLine()) != null)
            { 
                    record = record.Trim();
                    recordid = record.Substring(0, 2);
                    recorddetail = record.Substring(3, record.Length - 4);
                    switch (recordid)
                    {
                        case "01":
                            curFile.FileHeader = recorddetail;
                            break;
                        case "02":
                            curFile.Groups.Add(new BaiPreviousDayGroup());
                            var group = curFile.Groups[curFile.Groups.Count - 1];
                            group.GroupHeader = recorddetail;
                            group.Accounts = new List<BaiPreviousDayAccount>();
                            break;
                        case "03":
                            curFile.Groups[curFile.Groups.Count - 1].Accounts.Add(new BaiPreviousDayAccount());
                            var account = curFile.Groups[curFile.Groups.Count - 1].Accounts[curFile.Groups[curFile.Groups.Count - 1].Accounts.Count - 1];
                            account.AccountHeader = recorddetail;
                            account.DetailTransactions = new List<string>();
                            contflag = recordid;
                            break;
                        case "16":
                            curFile.Groups[curFile.Groups.Count - 1].Accounts[curFile.Groups[curFile.Groups.Count - 1].Accounts.Count - 1].DetailTransactions.Add(recorddetail);
                            contflag = recordid;
                            break;
                        case "88":
                            if (contflag == "03")
                            {
                                var accountdetail = curFile.Groups[curFile.Groups.Count - 1].Accounts;
                                accountdetail[accountdetail.Count - 1].AccountHeader += recorddetail;
                            }
                            else if (contflag == "16")
                            {
                                var detail = curFile.Groups[curFile.Groups.Count - 1].Accounts[curFile.Groups[curFile.Groups.Count - 1].Accounts.Count - 1].DetailTransactions;
                                detail[detail.Count - 1] += recorddetail;
                            }
                            break;
                        case "49":
                            curFile.Groups[curFile.Groups.Count - 1].Accounts[curFile.Groups[curFile.Groups.Count - 1].Accounts.Count - 1].AccountTrailer = recorddetail;
                            break;
                        case "98":
                            curFile.Groups[curFile.Groups.Count - 1].GroupTrailer = recorddetail;
                            break;
                        case "99":
                            curFile.FileTrailer = recorddetail;
                            break;
                        default:
                            Console.WriteLine("Invalid Record ID");
                            break;
                    }  
                }

                if (curFile.Groups.Count == 0)
                {
                    query = "Insert into dbo." + TableName + " ([packet01],[packet02],[packet03],[packet16],[packet49],[packet98],[packet99]) ";
                    query += "values(";
                    query += "'" + curFile.FileHeader + "'";
                    query += ",''";
                    query += ",''";
                    query += ",''";
                    query += ",''";
                    query += ",''";
                    query += ",'" + curFile.FileTrailer + "'";
                    query += ")";
                    SqlCommand SQLCommand = new SqlCommand(query, conn);
                    SQLCommand.ExecuteNonQuery();
                }
                else
                {
                    foreach (BaiPreviousDayGroup curgroup in curFile.Groups)
                    {
                        if (curgroup.Accounts.Count == 0)
                        {
                            query = "Insert into dbo." + TableName + " ([packet01],[packet02],[packet03],[packet16],[packet49],[packet98],[packet99]) ";
                            query += "values(";
                            query += "'" + curFile.FileHeader + "'";
                            query += ",'" + curgroup.GroupHeader + "'";
                            query += ",''";
                            query += ",''";
                            query += ",''";
                            query += ",'" + curgroup.GroupTrailer + "'";
                            query += ",'" + curFile.FileTrailer + "'";
                            query += ")";
                            SqlCommand SQLCommand = new SqlCommand(query, conn);
                            SQLCommand.ExecuteNonQuery();
                        }
                        else
                        {
                            foreach (BaiPreviousDayAccount curaccount in curgroup.Accounts)
                            {
                                if (curaccount.DetailTransactions.Count == 0)
                                {
                                    query = "Insert into dbo." + TableName + " ([packet01],[packet02],[packet03],[packet16],[packet49],[packet98],[packet99]) ";
                                    query += "values(";
                                    query += "'" + curFile.FileHeader + "'";
                                    query += ",'" + curgroup.GroupHeader + "'";
                                    query += ",'" + curaccount.AccountHeader + "'";
                                    query += ",''";
                                    query += ",'" + curaccount.AccountTrailer + "'";
                                    query += ",'" + curgroup.GroupTrailer + "'";
                                    query += ",'" + curFile.FileTrailer + "'";
                                    query += ")";
                                    SqlCommand SQLCommand = new SqlCommand(query, conn);
                                    SQLCommand.ExecuteNonQuery();
                                }
                                else
                                {
                                    foreach (string curtrx in curaccount.DetailTransactions)
                                    {
                                        query = "Insert into dbo." + TableName + " ([packet01],[packet02],[packet03],[packet16],[packet49],[packet98],[packet99]) ";
                                        query += "values(";
                                        query += "'" + curFile.FileHeader + "'";
                                        query += ",'" + curgroup.GroupHeader + "'";
                                        query += ",'" + curaccount.AccountHeader + "'";
                                        query += ",'" + curtrx + "'";
                                        query += ",'" + curaccount.AccountTrailer + "'";
                                        query += ",'" + curgroup.GroupTrailer + "'";
                                        query += ",'" + curFile.FileTrailer + "'";
                                        query += ")";
                                        SqlCommand SQLCommand = new SqlCommand(query, conn);
                                        SQLCommand.ExecuteNonQuery();
                                    };
                                };
                            };
                        };
                    };
                };

                Dts.TaskResult = (int)ScriptResults.Success;
                conn.Close();
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Exception from Script Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}
